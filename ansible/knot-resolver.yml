---
- name: Install knot-resolver
  hosts: incus_cluster0_pri,incus_cluster0_sec,dns_backup
  gather_facts: true
  become: true

  vars:
    knot_core_services:
    - kres-cache-gc
    knot_instantiated_services:
    - kresd@dns1
    - kresd@dns2

  tasks:
  - name: Enable cznic-labs repository
    block:
    - name: Install dependencies
      ansible.builtin.package:
        name:
        - apt-transport-https
        - ca-certificates
        state: present

    - name: Add cznic-labs GPG key
      ansible.builtin.get_url:
        url: https://pkg.labs.nic.cz/gpg
        dest: /usr/share/keyrings/cznic-labs-pkg.gpg
        checksum: "sha256:e82408f6c31b994e896f9c4244fa73bf92a10435289cab1f5ef5b619adae6482"
        mode: '0644'
        owner: root
        group: root

    - name: Add cznic-labs repository
      ansible.builtin.apt_repository:
        filename: cznic-labs-knot-resolver
        repo: "{{ repo_parts | join(' ') }}"
        state: present
        install_python_apt: true
        update_cache: true
      vars:
        repo_parts:
        - 'deb'
        - '[signed-by=/usr/share/keyrings/cznic-labs-pkg.gpg]'
        - 'https://pkg.labs.nic.cz/knot-resolver'
        - 'bookworm'
        - 'main'

  - name: Install knot-resolver
    ansible.builtin.package:
      name:
      - knot-resolver
      - knot-dnsutils
      state: present

  - name: Gather mount facts
    ansible.builtin.mount_facts:
      include_aggregate_mounts: false

  - name: Register if cache is mounted as tmpfs
    ansible.builtin.set_fact:
      is_cache_tmpfs: "{{ '/var/cache/knot-resolver' in ansible_facts.mount_points.keys() and
                        ansible_facts.mount_points['/var/cache/knot-resolver'].fstype == 'tmpfs' }}"

  - name: Gather service facts
    ansible.builtin.service_facts:

  - name: Stop service if running
    ansible.builtin.systemd_service:
      name: "{{ item }}.service"
      state: stopped
    loop: "{{ knot_core_services + knot_instantiated_services }}"
    when: not is_cache_tmpfs and ansible_facts.services[item] is defined and
            ansible_facts.services[item].state == 'running'

  - name: Clean cache directory
    ansible.builtin.file:
      path: /var/cache/knot-resolver
      state: absent
    when: not is_cache_tmpfs

  - name: Ensure cache directory exists
    ansible.builtin.file:
      path: /var/cache/resolver
      state: directory
      mode: '0755'
    when: not is_cache_tmpfs

  - name: Mount cache filesystem
    ansible.posix.mount:
      path: /var/cache/knot-resolver
      src: tmpfs
      fstype: tmpfs
      opts: "rw,size=256M,uid=knot-resolver,gid=knot-resolver,nosuid,nodev,noexec,mode=0700"
      state: mounted
    when: not is_cache_tmpfs
    notify: Restart knot-resolver-all

  - name: Configure knot-resolver
    ansible.builtin.template:
      src: kresd.conf.j2
      dest: /etc/knot-resolver/kresd.conf
      owner: root
      group: root
      mode: '0644'
    notify: Restart knot-resolver

  - name: Enable knot-resolver instances
    ansible.builtin.systemd_service:
      name: "{{ item }}.service"
      enabled: true
    loop: "{{ knot_instantiated_services }}"

  - name: Configure system to use local DNS cache
    ansible.builtin.copy:
      dest: /etc/resolv.conf
      owner: root
      group: root
      mode: '0644'
      content: |
        domain ipa.norme.sh
        search ipa.norme.sh
        nameserver 127.0.0.1

  - name: Create service template for kresd restarts
    ansible.builtin.template:
      src: restart-kresd@.service.j2
      dest: /etc/systemd/system/restart-kresd@.service
      owner: root
      group: root
      mode: '0644'

  - name: Create timer template for kresd restarts
    ansible.builtin.template:
      src: restart-kresd@.timer.j2
      dest: /etc/systemd/system/restart-kresd@.timer
      owner: root
      group: root
      mode: '0644'

  - name: Enable knot-resolver restart instances
    ansible.builtin.systemd_service:
      daemon_reload: true
      name: "restart-{{ item }}.timer"
      enabled: true
      state: started
    loop: "{{ knot_instantiated_services }}"

  - name: Create kresd keepalived notify script
    ansible.builtin.template:
      src: restart-kresd.sh.j2
      dest: /usr/local/bin/restart-kresd.sh
      owner: root
      group: root
      mode: '0700'

  handlers:
  - name: Restart services
    ansible.builtin.import_tasks: handlers/restarts.yml

- name: Import keepalived playbook
  ansible.builtin.import_playbook: keepalived.yml
